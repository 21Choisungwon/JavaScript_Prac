익명함수 정의 방법
    funtion(){

        코드;
        코드;
        코드;
        코드;
        코드;
        ...;

    }

익명함수는 이름이 존재하지 않기 때문에 정의함과 동시에 사용할 수 밖에 없다.
    (funtion (){
        코드;
        코드;
        코드;
        코드;
    })();
결국 익명함수는 다시 사용할 필요가 없을 때 , 일회성으로 사용함

    let tmp  = funtion (){

    }

    tmp();

익명함수를 정의하고 변수에 대입해서 사용하는 방식 지향
    var 대신 let 혹은 const를 사용하는 이유와 동일

    중복선언 문제 때문에 
    function add(){

    }

    add();

    let add = function(){
        
    }

    let add = function(){

    }
    익명함수를 사용하는 이유
    1. 함수를 일회성으로만 사용하여 , 굳이 이름을 지어줄 필요가 없을 경우
    2. 전통적인 선언방식에서 벗어나서 중복선언 문제를 해결하기위한 경우

익명함수 (화살표 표현식)
    기존 익명함수 정의
    function() {
        console.log('ㅎㅇ')
    }

    ()=>{
        console.log('ㅎㅇ')
    } //위의 익명함수 정의와 일치함 //매개변수가없는경우

    ()=> console.log('ㅎㅇ') 가능

    화살표 표현식은 함수 안에서 실행해야할  코드가 단 한줄 일 경우
    return과 중괄호를 생략할 수 있다.

    function(){}    == ()=>{}

    funtion (a,b){
        return a+b;
    }

    (a,b)=>{
        return a+b;
    }

    (a,b) = > a+b;      //매개변수가 있는경우

    매개변수가 한 개인 경우
    function(a){
        return a*a;
    }

    (a)=> {
        return a*a;
    }

    a=> {
        return a*a;
    }

    a=> a*a;