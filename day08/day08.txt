익명함수 정의 방법
    funtion(){

        코드;
        코드;
        코드;
        코드;
        코드;
        ...;

    }

익명함수는 이름이 존재하지 않기 때문에 정의함과 동시에 사용할 수 밖에 없다.
    (funtion (){
        코드;
        코드;
        코드;
        코드;
    })();
결국 익명함수는 다시 사용할 필요가 없을 때 , 일회성으로 사용함

    let tmp  = funtion (){

    }

    tmp();

익명함수를 정의하고 변수에 대입해서 사용하는 방식 지향
    var 대신 let 혹은 const를 사용하는 이유와 동일

    중복선언 문제 때문에 
    function add(){

    }

    add();

    let add = function(){
        
    }

    let add = function(){

    }
    익명함수를 사용하는 이유
    1. 함수를 일회성으로만 사용하여 , 굳이 이름을 지어줄 필요가 없을 경우
    2. 전통적인 선언방식에서 벗어나서 중복선언 문제를 해결하기위한 경우

익명함수 (화살표 표현식)
    기존 익명함수 정의
    function() {
        console.log('ㅎㅇ')
    }

    ()=>{
        console.log('ㅎㅇ')
    } //위의 익명함수 정의와 일치함 //매개변수가없는경우

    ()=> console.log('ㅎㅇ') 가능

    화살표 표현식은 함수 안에서 실행해야할  코드가 단 한줄 일 경우
    return과 중괄호를 생략할 수 있다.

    function(){}    == ()=>{}

    funtion (a,b){
        return a+b;
    }

    (a,b)=>{
        return a+b;
    }

    (a,b) = > a+b;      //매개변수가 있는경우

    매개변수가 한 개인 경우
    function(a){
        return a*a;
    }

    (a)=> {
        return a*a;
    }

    a=> {
        return a*a;
    }

    a=> a*a;

생성자 함수 만들기
    생성자함수를 만들면 일정한 property들을 갖고있는
    객체들을 생성할 수 있다

    생성자 함수는 반드시 대문자로 시작해야하며
    this는 생성자함수를 사용할때 만들어지는 객체 자신을 의미함
    따라서 this.변수 로 사용하면
    만들어지는 객체 속에 해당 프로퍼티를 만들 수 있다.

    생성자 앞에는 new를 써서 만들어진 객체를
    메모리상에 등록하고 사용한다.


DOM
    HTML(XML,...)문서의 모든 태그들은 객체로 관리된다
    자바스크립트로 DOM 객체를 받아오면 자유롭게 내용물(id,class,css,href,텍스트내용,tag...)
    등을 자유롭게 조회(검색) 수정 삭제 추가가 가능하다.

    document.write()
    document....
        document는 최상위 객체를 의미한다.(html태그)
        document 객체 안에 
        getElementById
            -->태그의 id 값으로 태그객체를 받아온다.
        getElementByClssName
            -->태그의 class 값으로 태그객체를 받아온다.
        getElementByTagName
            -->태그의 태그이름으로 태그객체를 받아온다.
        ...
        등의 함수를 활용하여 특정 태그 객체를 받아올 수 있다.



        Css 선택자를 기반으로 받아온다.
        querySelector
            한개만 결과로 받아온다.
        querySelectorAll
            배열에 담아서 받아온다.